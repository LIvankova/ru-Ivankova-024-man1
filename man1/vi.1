.\" Copyright (c) 1994
.\"     The Regents of the University of California.  All rights reserved.
.\" Copyright (c) 1994, 1995, 1996
.\"	Keith Bostic.  All rights reserved.
.\" Copyright (c) 2011
.\"	Zhihao Yuan.  All rights reserved.
.\"
.\" The vi program is freely redistributable.
.\" You are welcome to copy, modify and share it with others
.\" under the conditions listed in the LICENSE file.
.\" If any company (not individual!) finds vi sufficiently useful
.\" that you would have purchased it, or if any company wishes to
.\" redistribute it, contributions to the authors would be appreciated.
.\"
.Dd Сентябрь 25, 2020
.Dt VI 1
.Os
.Sh ИМЯ
.Nm ex , vi , view
.Nd текстовые редакторы
.Sh КРАТКОЕ ОПИСАНИЕ
.Nm ex
.Op Fl FRrSsv
.Op Fl c Ar cmd
.Op Fl t Ar tag
.Op Fl w Ar size
.Op Ar
.Nm vi\ \&
.Op Fl eFRrS
.Op Fl c Ar cmd
.Op Fl t Ar tag
.Op Fl w Ar size
.Op Ar
.Nm view
.Op Fl eFrS
.Op Fl c Ar cmd
.Op Fl t Ar tag
.Op Fl w Ar size
.Op Ar
.Sh ОПИСАНИЕ
.Nm vi
это текстовый редактор, ориентированный на экран.
.Nm ex
это текстовый редактор, ориентированный на строку.
.Nm ex
и
.Nm vi
являются разными интерфейсами лоя одной и той же программы,
и могут переключаться во время сеанса редактирования.
.Nm просмотр
равносилен использованию параметра
.Fl R
.Pq только для чтения

.Nm vi .
.Pp
Эта страница руководства прилагается к
.Nm nex Ns / Ns Nm nvi
версиям
.Nm ex Ns / Ns Nm vi
текстовых редакторов.
.Nm nex Ns / Ns Nm nvi
предназначены для замены оригинального программного обеспечения, совместимого с различными ошибками
Четвертый дистрибутив программного обеспечения Berkeley
.Pq 4BSD
.Nm ex
и
.Nm vi
програмы.
Для ознакомления с остальной частью этой страницы руководства,
.Nm nex Ns / Ns Nm nvi
используется только тогда, когда необходимо отличить его от прошлых
реализаций
.Nm ex Ns / Ns Nm vi .
.Pp
Эта страница руководства предназначена для пользователей, уже знакомых с
.Nm ex Ns / Ns Nm vi .
Всем остальным, прежде чем приступить к этой странице руководства, наверняка следует ознакомиться с хорошим руководством по
работе с редактором.
Если вы находитесь в незнакомой среде
и вам необходимо немедленно приступить к работе,
прочтите раздел после описания параметров, озаглавленный
.Sx FAST БЫСТРЫЙ ЗАПУСК .
It's этого, вероятно, будет достаточно для начала работы
.Pp
Доступны следующие параметры:
.Bl -tag -width "-w size "
.It Fl c Ar cmd
Выполняет
.Ar cmd
в первом загруженном файле.
Особенно полезно для первоначального позиционирования в файле, хотя
.Ar cmd
не ограничивается командами позиционирования.
Это интерфейс POSIX 1003.2 для исторического синтакса
.Dq +cmd
.
.Nm nex Ns / Ns Nm nvi
поддерживает как старый, так и новый синтаксис.
.It Fl e
Начинает редактирование в режиме ex, будто бы название команды было 
.Nm ex .
.It Fl F
Не копирует файл целиком при первом запуске редактирования.
(По умолчанию создается копия на случай, если кто-то другой внесет изменения
в файл во время вашего сеанса редактирования.)
.\" .It Fl l
.\" Start editing with the lisp and showmatch options set.
.It Fl R
Начинает редактирование в режиме только для чтения, как если бы имя команды было
.Nm просмотр ,
или параметр
.Cm только для чтения
был установлен.
.It Fl r
Восстанавливает указанные файлы или, если файлы не указаны,
перечислите файлы, которые могут быть восстановлены.
Если доступных для восстановления файлов с указанным именем не существует,
файл редактируется так, как если бы параметр
.Fl r
не был указан.
.It Fl S
Запускается с установленным параметром
.Cm безопасного
редактирования, запрещающим любой доступ к внешним программам
.It Fl s
Переходит в пакетный режим; применимо только для редактирования сеансов
.Nm ex
.
Пакетный режим полезен при запуске
.Nm ex
скриптов.
Приглашения, информационные сообщения и другие сообщения, ориентированные на пользователя, отключены,
и никакие файлы запуска или переменные среды не считываются.
Это интерфейс POSIX 1003.2 для исторического параметра
.Dq -
.
.Nm nex Ns / Ns Nm nvi
поддерживает как старый, так и новый синтаксис.
.It Fl t Ar tag
Начинает редактирование с указанного
.Ar тега
.Pq  Xr ctags 1 .
.It Fl v
Начинает редактирование в режиме vi, как если бы имя команды было
.Nm vi .
.It Fl w Ar size
Устанавливает начальный размер окна равным указанному количеству строк.
.El
.Pp
Ввод команд для
.Nm ex Ns / Ns Nm vi
считывается со стандартного ввода.
На интерфейсе
.Nm vi
считается ошибкой, если стандартный ввод неявляется терминальным.
На интерфейсе
.Nm ex
если стандартный ввод не является терминалом,
.Nm ex
будет считывать команды из него в любом случае; однако сеанс будет в
пакетном режиме, точно так же, как если бы параметр
.Fl s
был указан.
.Sh БЫСТРЫЙ ЗАПУСК
В этом разделе будет указано минимальное количество операций, необходимых для простого выполнения задачи редактирования с помощью 
.Nm vi .
Если вы никогда не пользовались экранными редакторами,
у вас, скорее всего, возникнут проблемы даже с этим простым введением.
В таком случае вам следует найти кого-нибудь, кто уже имеет опыт в этом
.Nm vi
и попросите их провести вас по этому разделу.
.Pp
.Nm vi
представляет из себя экранный редактор.
Это означает, что он занимает почти весь экран,
отображая часть файла в каждой строке экрана,
за исключением последней строки.
Последняя строка экрана используется для подачи команд на
.Nm vi ,
и для
.Nm vi
чтобы предоставить вам информацию.
.Pp
Другой факт, который вам необходимо понять, заключается в том, что
.Nm vi
представляет из себя сдержанный редактор,
напр., вы либо вводите текст, либо выполняете команды,
и для выполнения того или иного действия вам необходимо быть в правильном режиме.
При первом запуске редактирования файла вы перейдете в командный режим.
Существуют команды, которые переключают вас в режим ввода.
Существует только одна клавиша, которая выводит вас из режима ввода,
и это
.Aq escape
клавиша.
.Pp
В данном руководстве
названия клавиш обозначаются символом \(la и \(ra, напр.,
.Aq escape
обозначает
.Dq escape
клавишу, обычно отмеченую как
.Dq Esc
на клавиатуре вашего терминала.
Если вы не знаете, в каком режиме находитесь,
продолжайте вводить
.Aq escape
клавишу до тех пор, пока 
.Nm vi
не подаст вам сигнал
Обычно,
.Nm vi
will beep at you if you try and do something that's not allowed.
It will also display error messages.
.Pp
Чтобы начать редактирование файла, введите следующую команду:
.Pp
.Dl $ vi file
.Pp
Команда, которую вы должны ввести, как только начнете редактирование, такова:
.Pp
.Dl : устанавливает подробный режим показа
.Pp
Это заставит редактор выдавать вам подробные сообщения об ошибках и отображать
текущий режим в нижней части экрана.
.Pp
Команды для перемещения по файлу следующие:
.Bl -tag -width Ds
.It Cm h
Перемещает курсор влево на один символ.
.It Cm j
Перемещает курсор вниз на одну строку.
.It Cm k
Перемещает курсор вверх на одну строку.
.It Cm l
Перемещает курсор вправо на один символ.
.It Aq Cm cursor-arrows
Клавиши со стрелками курсора должны тоже работать.
.It Cm / Ns Ar text
Выполняет поиск по строке
.Dq Ar text
в файле
и перемещает курсор на его первый символ.
.El
.Pp
Команды для ввода нового текста следующие:
.Bl -tag -width "<escape>"
.It Cm a
Добавляет новый текст после курсора.
.It Cm i
Вставляет новый текст перед курсором.
.It Cm o
Открывает новую строку под строкой, на которой находится курсор, и вводит текст.
.It Cm O
Открывает новую строку над строкой, на которой находится курсор, и вводит текст.
.It Aq Cm escape
Как только вы войдете в режим ввода с помощью одной из команд
.Cm a ,
.Cm i ,
.Cm o
или
.Cm O
используется
.Aq Cm escape
чтобы прекратить ввод текста и вернуться в командный режим.
.El
.Pp
Команды для копирования текста следующие:
.Bl -tag -width Ds
.It Cm yy
Копирует строку, на которой находится курсор.
.It Cm p
Добавляет скопированную строку после той, на которой находится курсор.
.El
.Pp
Команды для удаления текста:
.Bl -tag -width Ds
.It Cm dd
Удаляет строку, на которой находится курсор.
.It Cm x
Удаляет символ, на котором находится курсор.
.El
.Pp
Команды для записи файла:
.Bl -tag -width Ds
.It Cm :w
Записывает файл обратно в файл с именем, которое вы изначально использовали
в качестве аргумента в
.Nm vi
командную строку.
.It Cm :w Ar file_name
Записывает файл обратно в файл с указанным именем
.Ar file_name .
.El
.Pp
Команды для завершения редактирования и выхода из редактора:
.Bl -tag -width Ds
.It Cm :q
Прекращает редактирование и завершает работу
.Nm vi
(если вы изменяли файл, но не сохранили свои изменения,
.Nm vi
откажется закрываться).
.It Cm :q!
Завершает работу, отбросив все изменения, которые вы могли внести.
.El
.Pp
Последнее предостережение:
Необычные символы могут занимать более одного столбца на экране,
а длинные строки могут занимать более одной строки на экране.
Приведенные выше команды работают с
.Dq физическими
символы и строки,
напр., 
они влияют на целую строку, независимо от того, сколько экранных строк она занимает, и на весь символ, независимо от того, сколько экранных столбцов он занимает.
.Sh РЕГУЛЯРНЫЕ ВЫРАЖЕНИЯ
.Nm ex Ns / Ns Nm vi
поддерживает регулярные выражения
.Pq REs ,
как было прописано в 
.Xr re_format 7 ,
для адресов строк, в качестве первой части
.Nm ex Cm substitute ,
.Cm глобальбные 
и
.Cm v
команды и в шаблонах поиска.
Основные регулярные выражения
.Pq BREs
включеается по умолчанию;
расширенные регулярные выражения
.Pq EREs
используютя если параметр
.Cm extended
выключен.
Использование регулярных выражений может быть в значительной степени отключено с помощью параметра
.Cm magic
.
.Pp
Следующие строки имеют особое значение в версии
.Nm ex Ns / Ns Nm vi
регулярных выражений:
.Bl -bullet -offset 6u
.It
Пустое регулярное выражение равносильно последнему использованному регулярному выражению.
.It
.Sq \e<
совпадает с началом слова.
.It
.Sq \e>
совпадает с концом слова.
.It
.Sq \(ti
соответствует заменяемой части последней
.Cm substitute
команды.
.El
.Sh БУФЕРЫ
Буфер представляет из себя область, в которой команды могут сохранять измененный или удаленный текст
для последующего использования.
.Nm vi
буферы именуются одним символом, перед которым ставятся двойные кавычки,
например
.Cm \&" Ns Aq Ar c ;
.Nm ex
буферы остаются такими же,
но без двойных кавычек.
.Nm nex Ns / Ns Nm nvi
разрешает использование любого символа без другого значения в позиции, где
ожидается имя буфера.
.Pp
Все буферы находятся либо в
.Em строковом режиме
или
.Em символьном режиме .
Вставка буфера в режиме строки в текст создает новые строки для каждой из
содержащихся в нем строк, в то время как буфер в режиме символа создает новые строки для любых
строк
.Em кроме
первой и последней строки, которые в нем содержатся.
Первая и последняя строки вставляются в текущее положение курсора, становясь
частью текущей строки.
Если в буфере больше одной строки,
сама текущая строка будет разделена.
Все команды
.Nm ex
команды, которые сохраняют текст в буферах, сохраняют его в линейном режиме.
Поведение команд
.Nm vi
команды зависят от связанной с ними команды перемещения:
.Bl -bullet -offset 6u
.It
.Aq Cm control-A ,
.Cm h ,
.Cm l ,
.Cm ,\& ,
.Cm 0 ,
.Cm B ,
.Cm E ,
.Cm F ,
.Cm T ,
.Cm W ,
.Cm \(ha ,
.Cm b ,
.Cm e ,
.Cm f
и
.Cm t
делает целевой буфер символьно-ориентированным.
.It
.Cm j ,
.Aq Cm control-M ,
.Cm k ,
.Cm \(aq ,
.Cm - ,
.Cm G ,
.Cm H ,
.Cm L ,
.Cm M ,
.Cm _
и
.Cm |\&
делает целевой буфер строчно-ориентированным.
.It
.Cm $ ,
.Cm % ,
.Cm \` ,
.Cm (\& ,
.Cm )\& ,
.Cm / ,
.Cm ?\& ,
.Cm [[ ,
.Cm ]] ,
.Cm {
и
.Cm }
назначает буфер назначения символьно-ориентированным, если только начальная и
конечная позиции не являются первым и последним символами в строке.
В этом случае буфер будет ориентирован на строку.
.El
.Pp
Команда
.Nm ex

.Cm отображение буферов
отображает текущий режим для каждого буфера.
.Pp
Именованные буферы
.Sq a
через
.Sq z
могут быть указаны с использованием их аналога в верхнем регистре, в случае чего новое содержимое будет добавлено в буфер, а не заменено им.
.Pp
Именованные буферы
.Sq 1
через
.Sq 9
являются особенными.
Область текста, измененная с помощью команды
.Cm c
.Pq change
или
.Cm d
.Pq delete
помещается в числовой буфер
.Sq 1
если другой буфер не указан и если он удовлетворяет одному из следующих условий:
.Bl -bullet -offset 6u
.It
включает в себя символы из более чем одной строки.
.It
задается с помощью линейно-ориентированного движения.
.It
задается с помощью одной из следующих команд перемещения:
.Aq Cm control-A ,
.Cm \` Ns Aq Ar символ ,
.Cm n ,
.Cm N ,
.Cm % ,
.Cm / ,
.Cm { ,
.Cm } ,
.Cm \&( ,
.Cm \&) ,
и
.Cm \&? .
.El
.Pp
Прежде, чем данная копия будет завершена, предыдущее содержимое буфера будет удалено.
.Sq 1
перемещаются в буфер
.Sq 2 ,
.Sq 2
в буфер
.Sq 3 ,
и так далее.
Содержимое буфера
.Sq 9
отбрасывается.
Обратите внимание, что это вращение происходит
.Em независимо
от того, указывает ли пользователь другой буфер.
В текст
.Nm vi ,
может быть сохранен в числовых буферах.
В этом случае перед заменой содержимого буфера происходит смена
буфера.
Числовые буферы доступны только в режиме
.Nm vi
.
.Sh VI КОМАНДЫ
Следующий раздел описывает команды, доступные в командном
режиме
.Nm vi
редактора.
Следующие слова имеют особое значение в описании команд:
.Pp
.Bl -tag -width bigword -compact -offset 3u
.It Ar bigword
Набор символов, не содержащих пробелов.
.It Ar буфер
Временная область, в которую команды могут перемещать текст.
Если ничего не указано, используется буфер по умолчанию.
См. также
.Sx БУФЕРЫ ,
расположенные выше.
.It Ar count
Положительное число, используемое для указания желаемого количества повторений
команды.
По умолчанию значение равно 1, если не указано иное.
.It Ar motion
Это команда перемещения курсора, которая указывает на другой конец затрагиваемой области текста, причем первым является текущее положение курсора.
Повторение символа команды приводит к изменению всей текущей строки.
Это слово
Последовательность букв, цифр или знаков подчеркивания.
.El
.Pp
.Ar buffer
и
.Ar count ,
если присутствуют оба параметра, они могут быть указаны в любом порядке.
.Ar motion
и
.Ar count ,
если присутствуют оба параметра, они эффективно умножаются вместе
и считаются частью движения.
.Pp
.Bl -tag -width Ds -compact
.It Xo
.Aq Cm control-A
.Xc
Выполняет поиск
по слову, начинающемуся с позиции курсора.
.Pp
.It Xo
.Op Ar count
.Aq Cm control-B
.Xc
Экраны
.Ar обратного отсчета 
страниц.
По возможности сохраняйте две линии перекрытия.
.Pp
.It Xo
.Op Ar count
.Aq Cm control-D
.Xc
Прокручивает страницу вперед
.Ar считая
строки.
Если
.Ar count
не задано, нужно прокрутить вперед на количество строк, указанное последним
.Aq Cm control-D
или
.Aq Cm control-U
командами.
Если это первая команда
.Aq Cm control-D
прокрутите половину количества строк на текущем экране.
.Pp
.It Xo
.Op Ar count
.Aq Cm control-E
.Xc
Листает вперед
.Ar count
строки, оставляя текущую строку и столбец как есть, если это возможно.
.Pp
.It Xo
.Op Ar count
.Aq Cm control-F
.Xc
Перемотка страницы вперед
.Ar count
экраны.
По возможности сохраняйте две линии перекрытия.
.Pp
.It Aq Cm control-G
Отобразить следующую информацию о файле:
имя файла
.Pq as given to Nm vi ;
изменялся ли файл с момента его последней записи;
если файл доступен только для чтения;
номер текущей строки;
общее количество строк в файле;
и номер текущей строки в процентах от общего количества строк в файле.
.Pp
.It Xo
.Op Ar count
.Aq Cm control-H
.Xc
.It Xo
.Op Ar count
.Cm h
.Xc
Перемесщает курсор назад
.Ar count
символы в текущей строке.
.Pp
.It Xo
.Op Ar count
.Aq Cm control-J
.Xc
.It Xo
.Op Ar count
.Aq Cm control-N
.Xc
.It Xo
.Op Ar count
.Cm j
.Xc
Перемещает курсор вниз
.Ar считает
строки без изменения текущего столбца.
.Pp
.It Aq Cm control-L
.It Aq Cm control-R
Перекрасьте экран.
.Pp
.It Xo
.Op Ar count
.Aq Cm control-M
.Xc
.It Xo
.Op Ar count
.Cm +
.Xc
Перемещает курсор вниз
.Ar считает
строки до первого непустого символа этой строки.
.Pp
.It Xo
.Op Ar count
.Aq Cm control-P
.Xc
.It Xo
.Op Ar count
.Cm k
.Xc
Перемещает курсор вверх
.Ar считает
строк, без изменения текущего столбца.
.Pp
.It Aq Cm control-T
Возвращает к самому последнему контексту тега.
.Pp
.It Xo
.Op Ar count
.Aq Cm control-U
.Xc
Прокручивает назад
.Ar считает
строки.
Если значение
.Ar счета
не задано, прокрутите назад на количество строк, указанное в последней команде
.Aq Cm control-D
или
.Aq Cm control-U
.
Если это первая команда
.Aq Cm control-U
прокручивает половину количества строк на текущем экране.
.Pp
.It Aq Cm control-W
Переключает на следующий нижний экран в окне
или на первый экран, если в окне нет нижних экранов.
.Pp
.It Xo
.Op Ar count
.Aq Cm control-Y
.Xc
Перематывает назад
.Ar считает
строки, оставляя текущую строку и столбец как есть, если возможно.
.Pp
.It Aq Cm control-Z
Приостанавливает текущий сеанс редактирования.
.Pp
.It Aq Cm escape
Выполняет команду
.Nm ex
ввода, или отмены, если она является только частичной.
.Pp
.It Aq Cm control-]
Помещает ссылку на тег в стек тегов.
.Pp
.It Aq Cm control-\(ha
Переключает на самый последний отредактированный файл.
.Pp
.It Xo
.Op Ar count
.Aq Cm space
.Xc
.It Xo
.Op Ar count
.Cm l
.Xc
Перемещает курсор вперед
.Ar считает
символы без изменения текущей строки.
.Pp
.It Xo
.Op Ar count
.Cm !\&
.Ar motion shell-argument(s)
.Aq Li carriage-return
.Xc
Заменяет линии, пересекаемые
.Ar счет
и
.Ar движение
с выходом данных
.Pq стандартный вывод и стандартная ошибка
программы, названной пользователем
Параметр
.Cm оболочки
 вызываемый с помощью
.Fl c
флаг, за которым следует
.Ar shell-argument(s)
.Pq объединенные в один аргумент .
Внутри
.Ar shell-argument(s) ,

.Sq % ,
.Sq #
и
.Sq !\&
символы расширяются до текущего имени файла,
предыдущего текущего имени файла
и текста команды предыдущего
.Cm !\&
или
.Cm :!
команды, соответственно.
Особое значение 
.Sq % ,
.Sq #
и
.Sq !\&
их можно переопределить, экранируя обратной косой чертой.
.Pp
.It Xo
.Op Ar count
.Cm #
.Sm off
.Cm # | + | -
.Sm on
.Xc
Возрастание
.Pq trailing So # Sc or So + Sc
или уменьшение
.Pq trailing Sq -
число под курсором с помощью
.Ar count ,
начиная с позиции курсора или с первого непустого
символа, следующего за ним.
Цифры с начальным значением
.Sq 0x
или
.Sq 0X
интерпретируются как шестнадцатеричные числа.
Числа с начальным
.Sq 0
интерпретируются как восьмеричные числа, если только они не содержат не восьмеричную цифру.
Другие числа могут иметь префикс в виде
.Sq +
или
.Sq -
sign.
.Pp
.It Xo
.Op Ar count
.Cm $
.Xc
Перемещает курсор в конец строки.
If
.Ar счет
указан, дополнительно перемещая курсор вниз
.Ar счет
\(mi 1 линии.
.Pp
.It Cm %
Переход к
.Cm matchars
символ matchchars соответствует
символу, находящемуся в позиции курсора или ближайшему справа от него.
.Pp
.It Cm &
Повторяет предыдущую команду подстановки в текущей строке.
.Pp
.It Xo
.Cm \(aq Ns Aq Ar character
.Xc
.It Xo
.Cm \` Ns Aq Ar character
.Xc
Возвращает в положение курсора, отмеченное символом
.Ar character ,
или, если
.Ar символ

.Sq \(aq
или
.Sq \` ,
к положению курсора перед последней из следующих команд:
.Aq Cm control-A ,
.Aq Cm control-T ,
.Aq Cm control-] ,
.Cm % ,
.Cm \(aq ,
.Cm \` ,
.Cm (\& ,
.Cm )\& ,
.Cm / ,
.Cm ?\& ,
.Cm G ,
.Cm H ,
.Cm L ,
.Cm [[ ,
.Cm ]] ,
.Cm { ,
.Cm } .
Первая форма возвращает к первому непустому символу строки, отмеченной
.Ar символом .
Вторая форма возвращает к строке и столбцу, отмеченной
.Ar символом .
.Pp
.It Xo
.Op Ar считает
.Cm \&(
.Xc
.It Xo
.Op Ar считает
.Cm \&)
.Xc
Перемещает
.Ar счет
предложения в обратном или прямом направлении, соответственно.
Предложение - это область текста, которая начинается с первого непустого символа, следующего за предыдущим предложением, абзацем или
разделом, и продолжается до следующей точки, восклицательного
знака или вопросительного знака, за которыми следует любое количество закрывающих скобок,
скобочных скобок, двойных или одинарных кавычек, за которыми следует
конец-конец строки или два пробельных символа.
Группы пустых строк
.Pq или строки, содержащие только пробельные символы, рассматриваются как единое предложение.
.Pp
.It Xo
.Op Ar счет
.Cm ,\&
.Xc
Обратный символ поиска
.Pq i.e., the last Cm F , f , T No or Cm t отсуствие команды
.Ar счета
времена.
.Pp
.It Xo
.Op Ar счет
.Cm -
.Xc
Переходит к первому непустому символу предыдущей строки,
.Ar считает
времена.
.Pp
.It Xo
.Op Ar счет
.Cm .\&
.Xc
Повторяет последнюю команду
.Nm vi
, которая редактирует текст.
.Ar счет
заменяет оба
.Ar счет
параметр повторяющейся команды и параметра связанного с ней
.Ar движение .
Если команда
.Cm .\&
повторяет команду
.Cm u
журнал изменений прокручивается вперед или назад, в зависимости от действия
пользователя.
.Cm u
команда.
.Pp
.It Xo
.Pf / Ns Ar RE
.Aq Li carriage-return
.Xc
.It Xo
.Pf / Ns Ar RE Ns /
.Op Ar offset
.Op Cm z
.Aq Li carriage-return
.Xc
.It Xo
.Pf ?\& Ns Ar RE
.Aq Li carriage-return
.Xc
.It Xo
.Pf ?\& Ns Ar RE Ns ?\&
.Op Ar offset
.Op Cm z
.Aq Li carriage-return
.Xc
.It Cm N
.It Cm n
Ищет дальше
.Pq Sq /
или обратно
.Pq Sq ?\&
для регулярного выражения.
.Cm n
и
.Cm N
повторяет последний поиск в том же или противоположном направлениях соответственно.
Если
.Ar RE
пуст, используется последнее поисковое регулярное выражение.
Если
.Ar offset
указан, то курсор помещен
.Ar offset
строки до или после соответствующего регулярного выражения.
Если либо
.Cm n
либо
.Cm N
команды используются в качестве компонентов движения для
.Cm !\&
команда, не будет выдан запрос на ввод текста команды и предыдущего
.Cm !\&
будет выполнен.
Несколько шаблонов поиска можно сгруппировать, разделив их точкой с
запятой и нулем или более пробельными символами.
Эти шаблоны вычисляются слева направо, а конечное положение курсора
определяется последним шаблоном поиска.
A
.Cm z
команда может быть добавлена к закрытым поисковым выражениям, чтобы изменить положение
строки результатов.
.Pp
.It Cm 0
Перейдите к первому символу в текущей строке.
.Pp
.It Cm :\&
Выполняет команду
.Nm ex
.
.Pp
.It Xo
.Op Ar счет
.Cm ;\&
.Xc
Повторяет поиск последнего символа
(то есть, последнюю команду
.Cm F , f , T
или
.Cm t
)
.Ar считает
времена.
.Pp
.It Xo
.Op Ar count
.Cm <
.Ar motion
.Xc
.It Xo
.Op Ar count
.Cm >
.Ar motion
.Xc
Смена
.Ar считает
линии влево или вправо, соответственно, на величину
.Cm shiftwidth .
.Pp
.It Cm @ Ar буфер
Выполняет названный
.Ar буфер
как
.Nm vi
команды.
Буфер может включать в себя команды
.Nm ex
тоже, но они должны быть выражены в виде
.Cm \&:
команды.
If
.Ar buffer
is
.Sq @
or
.Sq * ,
затем должен быть использован последний выполненный буфер.
.Pp
.It Xo
.Op Ar счет
.Cm A
.Xc
Выполняет вход в режим ввода, добавляя текст после конца строки.
Если
.Ar счет
при вводе параметра вводимые символы повторяются
.Ar count
\(mi 1 раз после выхода из режима ввода.
.Pp
.It Xo
.Op Ar count
.Cm B
.Xc
Передвигается назад
.Ar count
bigwords.
.Pp
.It Xo
.Op Ar buffer
.Cm C
.Xc
Изменяет текст с текущей позиции на конец строки.
Если
.Ar буфер
указан,
.Dq yank
the deleted text into
.Ar буфер .
.Pp
.It Xo
.Op Ar буфер
.Cm D
.Xc
Удаляет текст с текущей позиции до конца строки.
Если
.Ar буфер
указывается,
.Dq yank
удаленный текст в
.Ar буфер .
.Pp
.It Xo
.Op Ar count
.Cm E
.Xc
Передвигается вперед
.Ar count
end-of-bigwords.
.Pp
.It Xo
.Op Ar count
.Cm F Aq Ar character
.Xc
Производит поиск
.Ar отсчитывает
время в обратном порядке по текущей строке для
.Aq Ar символа .
.Pp
.It Xo
.Op Ar count
.Cm G
.Xc
Перемещается к строке
.Ar количество ,
или последняя строка файла , если
.Ar количество
не указано.
.Pp
.It Xo
.Op Ar count
.Cm H
.Xc
Переходит к строке экрана
.Ar количество
\(mi на 1 строчку ниже верхней части экрана.
.Pp
.It Xo
.Op Ar количество
.Cm I
.Xc
Входит в режим ввода, вставив текст в начало строки.
Если в параметре
.Ar количество ,
вводимые символы повторяются
.Ar считает
\(mi еще 1 раз.
.Pp
.It Xo
.Op Ar count
.Cm J
.Xc
Join
.Ar отсчитывает
строки от текущей строки.
Интервал между двумя соединяемыми строками устанавливается равным двум пробельным символам, если первая заканчивается вопросительным знаком, точкой или восклицательным знаком.
В противном случае он устанавливается равным одному пробельному символу.
.Pp
.It Xo
.Op Ar count
.Cm L
.Xc
Переходит к строке экрана
.Ar count
\(mi на 1 строчку выше нижней части экрана.
.Pp
.It Cm M
Переходит к экранной строке в середине экрана.
.Pp
.It Xo
.Op Ar count
.Cm O
.Xc
Входит в режим ввода, добавив текст в новой строке над текущей строкой.
Если при вводе аргумента 
.Ar count
вводимые
символы повторяются
.Ar count
\(mi 1 more times.
.Pp
.It Xo
.Op Ar buffer
.Cm P
.Xc
Вставляет текст из
.Ar buffer
перед текущим столбцом, если
.Ar buffer
ориентирован на символы или перед текущей строкой, если она ориентирована на строку.
.Pp
.It Cm Q
Выходит
.Nm vi
.Pq или визуальный
режим и переключается в
.Nm ex
режим.
.Pp
.It Xo
.Op Ar count
.Cm R
.Xc
Входит в режим ввода, заменив символы в текущей строке.
Если аргумент
.Ar count,
указан,
вводимые символы повторяются
.Ar count
\(mi еще 1 раз при выходе из режима вставки.
.Pp
.It Xo
.Op Ar buffer
.Op Ar count
.Cm S
.Xc
Заместитель
.Ar count
строк.
Если
.Ar buffer
указан,
.Dq yank
удаленный текст в
.Ar буфер .
.Pp
.It Xo
.Op Ar count
.Cm T
.Aq Ar character
.Xc
Ищет в обратном направлении,
.Ar count
разы, через текущую строку для символа после указанного
.Aq Ar character .
.Pp
.It Cm U
Восстанавливает текущую строку в том состоянии, в котором она находилась до последнего перемещения курсора на нее.
.Pp
.It Xo
.Op Ar count
.Cm W
.Xc
Передвигается вперед
.Ar count
bigwords.
.Pp
.It Xo
.Op Ar buffer
.Op Ar count
.Cm X
.Xc
Удаляет
.Ar count
символы перед курсором в текущей строке.
Если
.Ar буфер
указан
.Dq yank
удаленный текст в
.Ar buffer .
.Pp
.It Xo
.Op Ar buffer
.Op Ar count
.Cm Y
.Xc
Копирует
.Pq or Dq yank
.Ar count
lines into
.Ar buffer .
.Pp
.It Cm ZZ
Записывает файл и завершите работу
.Nm vi
если больше нет файлов для редактирования.
Ввод двух
.Dq quit
команд подряд игнорирует все оставшиеся файлы для редактирования.
.Pp
.It Xo
.Op Ar count
.Cm [[
.Xc
Back up
.Ar count
границы раздела.
.Pp
.It Xo
.Op Ar count
.Cm ]]
.Xc
Передвигается вперед
.Ar count
границы раздела.
.Pp
.It Cm \(ha
Переходит к первому непустому символу в текущей строке.
.Pp
.It Xo
.Op Ar count
.Cm _
.Xc
Передвигается вниз
.Ar count
\(mi 1 строка, до первого непустого символа.
.Pp
.It Xo
.Op Ar count
.Cm a
.Xc
Входит в режим ввода, добавляя текст после курсора.
Если параметр
.Ar count
указан,
вводимые символы повторяются
.Ar count
некоторое количество раз.
.Pp
.It Xo
.Op Ar count
.Cm b
.Xc
Передвигается назад
.Ar count
слов.
.Pp
.It Xo
.Op Ar buffer
.Op Ar count
.Cm c
.Ar motion
.Xc
Изменяет область текста, описываемую
.Ar count
и
.Ar motion .
Если
.Ar buffer
указан,
.Dq yank
измененный текст в
.Ar buffer .
.Pp
.It Xo
.Op Ar buffer
.Op Ar count
.Cm d
.Ar motion
.Xc
Удаляет область текста, описанную
.Ar count
и
.Ar motion .
Если
.Ar buffer
указан,
.Dq yank
удаленный текст в
.Ar buffer .
.Pp
.It Xo
.Op Ar count
.Cm e
.Xc
Передвигается вперед
.Ar count
end-of-words.
.Pp
.It Xo
.Op Ar count
.Cm f Aq Ar character
.Xc
Ищет дальше,
.Ar count
разы, через оставшуюся часть текущей строки для
.Aq Ar character .
.Pp
.It Xo
.Op Ar count
.Cm i
.Xc
Войдите в режим ввода, вставив текст перед курсором.
Если
.Ar count
при вводе аргумента вводимые
символы повторяются
.Ar count
количество рах.
.Pp
.It Xo
.Cm m
.Aq Ar character
.Xc
Сохраняет текущий контекст
.Pq строки и столбца
как
.Aq Ar символы .
.Pp
.It Xo
.Op Ar count
.Cm o
.Xc
Входит в режим ввода, добавив текст в новой строке под текущей строкой.
Если параметр
.Ar count
при вводе аргумента вводимые
символы повторяются
.Ar count
\(mi еще 1 раз
.Pp
.It Xo
.Op Ar buffer
.Cm p
.Xc
Добавление текста из
.Ar buffer .
Текст добавляется после текущего столбца, если
.Ar buffer
ориентирован на символы или, в противном случае, после текущей строки.
.Pp
.It Xo
.Op Ar count
.Cm r
.Aq Ar character
.Xc
Меняет
.Ar count
символы с 
.Ar character .
.Pp
.It Xo
.Op Ar buffer
.Op Ar count
.Cm s
.Xc
Substitute
.Ar count
символы в текущей строке, начинающиеся с текущего символа.
Если
.Ar buffer
указан,
.Dq yank
замененный текст в
.Ar buffer .
.Pp
.It Xo
.Op Ar count
.Cm t
.Aq Ar character
.Xc
Search forward,
.Ar количество
раз, через текущую строку для символа непосредственно перед
.Aq Ar character .
.Pp
.It Cm u
Отменяет последнее изменение, внесенное в файл.
При повторном изменении файл
.Cm u
команда переключается между этими двумя состояниями.
Команда
.Cm .\&
при использовании сразу после
.Cm u ,
приводит к прокрутке журнала изменений вперед или назад, в зависимости от действия
пользователя.
.Cm u
команда.
.Pp
.It Xo
.Op Ar count
.Cm w
.Xc
Move forward
.Ar count
words.
.Pp
.It Xo
.Op Ar buffer
.Op Ar count
.Cm x
.Xc
Delete
.Ar count
символы в текущем положении курсора, но не более, чем до
конца строки.
.Pp
.It Xo
.Op Ar buffer
.Op Ar count
.Cm y
.Ar motion
.Xc
Копирует
.Pq or Dq yank
текстовая область, заданная с помощью
.Ar count
и
.Ar motion
в буфер.
.Pp
.It Xo
.Op Ar count1
.Cm z
.Op Ar count2
.Cm type
.Xc
Переписывает, при необходимости изменив положение и размер экрана.
Если
.Ar count2
указан, ограничьте размер экрана до
.Ar count2
строки.
Следующий
.Cm тип
могут быть использованы символы:
.Bl -tag -width Ds
.It Cm +
If
.Ar count1
указан, помещается в строку
.Ar count1
в верхней части экрана.
В противном случае отобразите экран после текущего экрана.
.It Aq Cm carriage-return
Помещает строку
.Ar count1
в верхней части экрана.
.It Cm .\&
Помещает строку
.Ar count1
в центре экрана
.It Cm -
Продолжжает линию
.Ar count1
в нижней части экрана.
.It Cm \(ha
Если
.Ar count1
задан,
отображается экран перед экраном 
.Ar count1
.Pq т.е. за 2 экрана до.
В противном случае отобразите экран перед текущим экраном.
.El
.Pp
.It Xo
.Op Ar count
.Cm {\&
.Xc
Передвигается назад
.Ar count
за абзацы.
.Pp
.It Xo
.Op Ar column
.Cm |\&
.Xc
Переходит к определенному
.Ar столбцу ,
расположенному в текущей строке.
Если
.Ar столбец
опущен,
перемещает в начало текущей строки.
.Pp
.It Xo
.Op Ar count
.Cm }\&
.Xc
Передвигается вперед
.Ar count
абзацы.
.Pp
.It Xo
.Op Ar count
.Cm \(ti
.Ar ход
.Xc
If the
.Cm tildeop
если параметр не установлен, измените регистр следующего
.Ar count
символ(ы) и нет
.Ar движение
может быть задано.
Иначе
.Ar иначе
является обязательным и
.Cm \(ti
изменяет регистр символов в текстовой области на противоположный, заданный параметром
.Ar count
и
.Ar motion .
.Pp
.It Aq Cm прерывает
Прервите текущую операцию.
К символу
.Aq прерывания
символом обычно является
.Aq control-C .
.Aq control-C .
.El
.Sh VI КОМАНДЫ ВВОДА ТЕКСТА
В следующем разделе описываются команды, доступные в режиме ввода текста
редактора .Nm vi
.
.Pp
.Bl -tag -width Ds -compact
.It Aq Cm nul
Воспроизводит предыдущий ввод.
.Pp
.It Aq Cm control-D
Стирает предыдущие
.Ar shiftwidth
границы столбца.
.Pp
.It Cm \(ha Ns Aq Cm control-D
Удаляет все символы автоиндентирования и сбросьте уровень автоиндентирования.
.Pp
.It Cm 0 Ns Aq Cm control-D
Стирает все автоиндентируемые символы.
.Pp
.It Aq Cm control-T
Вставляет достаточное количество
.Aq tab
и
.Aq space
символы для перехода к следующей
.Ar shiftwidth
границе столбца.
Если
.Cm expandtab
параметр установлен, остается только вставить
.Aq space
символы.
.Pp
.It Aq Cm erase
.It Aq Cm control-H
Стирает последний символ.
.Pp
.It Aq Cm literal next
Избавляет следующий символ от какого-либо особого значения.
Символ
.Aq literal\ \&next
обычно
.Aq control-V .
.Pp
.It Aq Cm escape
Разрешает весь ввод текста в файл и возвращается в командный режим.
.Pp
.It Aq Cm line erase
Стирает текущую строку.
.Pp
.It Aq Cm control-W
.It Aq Cm word erase
Стирает последнее слово.
Определение слова зависит от параметров
.Cm altwerase
и
.Cm ttywerase
.
.Pp
.Sm off
.It Xo
.Aq Cm control-X
.Bq Cm 0-9A-Fa-f
.Cm +
.Xc
.Sm on
Вставляет в текст символ с указанным шестнадцатеричным значением.
.Pp
.It Aq Cm interrupt
Прерывает режим ввода текста, возвращаясь в командный режим.
Для
.Aq interrupt
символов обычно
.Aq control-C .
.El
.Sh ПРОШЛЫЕ КОМАНДЫ
В последующем разделе описываются команды, доступные в
.Nm ex
редактор.
В каждой записи ниже строка тега представляет собой краткое описание использования команды.
.Pp
.Bl -tag -width Ds -compact
.It Aq Cm end-of-file
Прокрутите экран.
.Pp
.It Cm !\& Ar argument(s)
.It Xo
.Op Ar range
.Cm !\&
.Ar argument(s)
.Xc
Выполняет команду shell или отфильтруйте строки с помощью команды shell.
.Pp
.It Cm \&"
Комментарий.
.Pp
.It Xo
.Op Ar range
.Cm nu Ns Op Cm mber
.Op Ar count
.Op Ar flags
.Xc
.It Xo
.Op Ar range
.Cm #
.Op Ar count
.Op Ar flags
.Xc
Отобразите выбранные строки, каждой из которых предшествует свой номер строки:
.Pp
.It Cm @ Ar buffer
.It Cm * Ar buffer
Запускает буфер.
.Pp
.It Xo
.Op Ar range
.Cm < Ns Op Cm < ...
.Op Ar count
.Op Ar flags
.Xc
Сдвигает линии влево.
.Pp
.It Xo
.Op Ar line
.Cm =
.Op Ar flags
.Xc
Отображает номер 
.Ar строки .
Если
.Ar строка
не указана, выведите номер строки последней строки в файле.
.Pp
.It Xo
.Op Ar range
.Cm > Ns Op Cm > ...
.Op Ar count
.Op Ar flags
.Xc
Сдвижение линии вправо.
.Pp
.It Xo
.Cm ab Ns Op Cm breviate
.Ar lhs rhs
.Xc
.Nm vi
только.
Добавляет
.Ar lhs
как сокращение от
.Ar rhs
к списку сокращений.
.Pp
.It Xo
.Op Ar line
.Cm a Ns Op Cm ppend Ns
.Op Cm !\&
.Xc
Вводимый текст добавляется после указанной строки.
.Pp
.It Cm ar Ns Op Cm gs
Отобразит список аргументов.
.Pp
.It Cm bg
.Nm vi
only.
Фон текущего экрана.
.Pp
.It Xo
.Op Ar range
.Cm c Ns Op Cm hange Ns
.Op Cm !\&
.Op Ar count
.Xc
Введенный текст заменяет указанный диапазон.
.Pp
.It Xo
.Cm chd Ns Op Cm ir Ns
.Op Cm !\&
.Op Ar directory
.Xc
.It Xo
.Cm cd Ns Op Cm !\&
.Op Ar directory
.Xc
Change the current working directory.
.PpИзмените текущий рабочий каталог.
.It Xo
.Op Ar range
.Cm co Ns Op Cm py
.Ar line
.Op Ar flags
.Xc
.It Xo
.Op Ar range
.Cm t
.Ar line
.Op Ar flags
.Xc
Скопируйте указанные строки после пункта назначения
.Ar строки .
.Pp
.It Xo
.Cm cs Ns Op Cm cope
.Cm add | find | help | kill | reset
.Xc
Выполнит команду Cscope.
.Pp
.It Xo
.Op Ar range
.Cm d Ns Op Cm elete
.Op Ar buffer
.Op Ar count
.Op Ar flags
.Xc
Удалит строки из файла.
.Pp
.It Xo
.Cm di Ns Op Cm splay
.Cm b Ns Oo Cm uffers Oc |
.Cm c Ns Oo Cm onnections Oc |
.Cm s Ns Oo Cm creens Oc |
.Cm t Ns Op Cm ags
.Xc
Отображает буферы, соединения Cscope, экраны или теги.
.Pp
.It Xo
.Op Cm Ee Ns
.Op Cm dit Ns
.Op Cm !\&
.Op Ar +cmd
.Op Ar file
.Xc
.It Xo
.Op Cm Ee Ns
.Cm x Ns Op Cm !\&
.Op Ar +cmd
.Op Ar file
.Xc
Отредактирует другой файл. Команда, написанная заглавными буквами, открывает новый экран под
текущим экраном.
.Pp
.It Xo
.Cm exu Ns Op Cm sage
.Op Ar command
.Xc
Использование дисплея для команды
.Nm ex
.
.Pp
.It Xo
.Cm f Ns Op Cm ile
.Op Ar file
.Xc
Отобразит и при необходимости измените имя файла.
.Pp
.It Xo
.Op Cm Ff Ns
.Cm g
.Op Ar name
.Xc
.Nm vi
только в режиме ожидания.
Выделите указанный экран на переднем плане. Команда, написанная заглавными буквами, открывает новый экран под текущим экраном.
.Pp
.It Xo
.Op Ar range
.Cm g Ns Op Cm lobal
.No / Ns Ar pattern Ns /
.Op Ar commands
.Xc
.It Xo
.Op Ar range
.Cm v
.No / Ns Ar pattern Ns /
.Op Ar commands
.Xc
Apply commands to lines matching
.Pq Sq global
or not matching
.Pq Sq v
a pattern.
.Pp
.It Cm he Ns Op Cm lp
Отобразит справочное сообщение.
.Pp
.It Xo
.Op Ar line
.Cm i Ns Op Cm nsert Ns
.Op Cm !\&
.Xc
Вводимый текст вставляется перед указанной строкой.
.Pp
.It Xo
.Op Ar range
.Cm j Ns Op Cm oin Ns
.Op Cm !\&
.Op Ar count
.Op Ar flags
.Xc
Соединяйте строки текста вместе.
.Pp
.It Xo
.Op Ar range
.Cm l Ns Op Cm ist
.Op Ar count
.Op Ar flags
.Xc
Отображает линии недвусмысленно.
.Pp
.It Xo
.Cm map Ns Op Cm !\&
.Op Ar lhs rhs
.Xc
Определение или отображение карт
.Pq для Nm vi No только .
.Pp
.It Xo
.Op Ar line
.Cm ma Ns Op Cm rk
.Aq Ar character
.Xc
.It Xo
.Op Ar line
.Cm k Aq Ar character
.Xc
Отметит линию меткой
.Aq Ar character .
.Pp
.It Xo
.Op Ar range
.Cm m Ns Op Cm ove
.Ar line
.Xc
Переместит указанные линии после целевой линии.
.Pp
.It Xo
.Cm mk Ns Op Cm exrc Ns
.Op Cm !\&
.Ar file
.Xc
Запишет сокращения, параметры редактора и карты в соответствии с указанным
.Ar file .
.Pp
.It Xo
.Op Cm Nn Ns
.Op Cm ext Ns
.Op Cm !\&
.Op Ar
.Xc
Отредактирует следующий файл из списка аргументов. Команда, написанная с заглавной буквы, открывает новый экран под текущим экраном.
.\" .Pp
.\" .It Xo
.\" .Op Ar line
.\" .Cm o Ns Op Cm pen
.\" .No / Ns Ar pattern Ns /
.\" .Op Ar flags
.\" .Xc
.\" Enter open mode.
.Pp
.It Cm pre Ns Op Cm serve
Сохраните файл в виде, который позже можно будет восстановить с помощью
.Nm ex
.Fl r
параметр.
.Pp
.It Xo
.Op Cm \&Pp Ns
.Cm rev Ns Op Cm ious Ns
.Op Cm !\&
.Xc
Отредактирует предыдущий файл из списка аргументов. Команда, написанная с заглавной буквы, открывает новый экран под текущим экраном.
.Pp
.It Xo
.Op Ar range
.Cm p Ns Op Cm rint
.Op Ar count
.Op Ar flags
.Xc
Отобразит указанные строки.
.Pp
.It Xo
.Op Ar line
.Cm pu Ns Op Cm t
.Op Ar buffer
.Xc
Добавит содержимое буфера к текущей строке.
.Pp
.It Xo
.Cm q Ns Op Cm uit Ns
.Op Cm !\&
.Xc
Завершит сеанс редактирования.
.Pp
.It Xo
.Op Ar line
.Cm r Ns Op Cm ead Ns
.Op Cm !\&
.Op Ar file
.Xc
Прочитает файл.
.Pp
.It Xo
.Cm rec Ns Op Cm over
.Ar file
.Xc
Восстановит
.Ar файл , 
если он был ранее сохранен.
.Pp
.It Xo
.Cm res Ns Op Cm ize
.Op Cm + Ns | Ns Cm - Ns
.Ar size
.Xc
.Nm vi
только в режиме.
Увеличивает или уменьшает размер текущего экрана.
.Pp
.It Xo
.Cm rew Ns Op Cm ind Ns
.Op Cm !\&
.Xc
Перемотает список аргументов назад.
.Pp
.It Xo
.Cm se Ns Op Cm t
.Sm off
.Op option Oo = Oo value Oc Oc \ \&...
.Sm on
.Pf \ \& Op nooption ...
.Op option? ...
.Op Ar all
.Xc
Отобразит или задаст параметры редактора.
.Pp
.It Cm sh Ns Op Cm ell
Запустит программу-оболочку.
.Pp
.It Xo
.Cm so Ns Op Cm urce
.Ar file
.Xc
Чтение и выполнение команд
.Nm ex
из файла.
.Pp
.It Xo
.Op Ar range
.Cm s Ns Op Cm ubstitute
.Sm off
.Op / Ar pattern No / Ar replace No /
.Sm on
.Pf \ \& Op Ar options
.Op Ar count
.Op Ar flags
.Xc
.It Xo
.Op Ar range
.Cm &
.Op Ar options
.Op Ar count
.Op Ar flags
.Xc
.It Xo
.Op Ar range
.Cm \(ti
.Op Ar options
.Op Ar count
.Op Ar flags
.Xc
Делает замены.
на
.Ar replace
поле может содержать любую из следующих последовательностей:
.Bl -tag -width Ds
.It Sq \*(Am
Текст, соответствующий
.Ar pattern .
.It Sq \(ti
Заменяющая часть предыдущей
.Cm substitute
команды.
.It Sq %
Если это весь образец
.Ar replace
заменяющий часть предыдущей
.Cm substitute
команды.
.It Sq \e Ns Ar \(sh
Где
.Sq Ar \(sh
представляет собой целое число от 1 до 9, текст которого соответствует
.Ar # Ns 'th subexpression in
.Ar pattern .
.It Sq \eL
Приводит к тому, что символы располагаются до конца строки при следующем появлении
.Sq \eE
или
.Sq \ee
для преобразования в нижний регистр.
.It Sq \el
Приводит к преобразованию следующего символа в нижний регистр.
.It Sq \eU
Приводит к тому, что символы располагаются до конца строки при следующем появлении
.Sq \eE
или
.Sq \ee
для преобразования в верхний регистр.
.It Sq \eu
Приводит к преобразованию следующего символа в верхний регистр.
.El
.Pp
.It Xo
.Cm su Ns Op Cm spend Ns
.Op Cm !\&
.Xc
.It Xo
.Cm st Ns Op Cm op Ns
.Op Cm !\&
.Xc
.It Aq Cm suspend
Приостановит сеанс редактирования.
Для
.Aq suspend
символы обычно
.Aq control-Z .
.Pp
.It Xo
.Op Cm Tt Ns
.Cm a Ns Op Cm g Ns
.Op Cm !\&
.Ar tagstring
.Xc
Отредактирует файл, содержащий указанный тег. Команда, написанная заглавными буквами, открывает
новый экран под текущим экраном.
.Pp
.It Xo
.Cm tagn Ns Op Cm ext Ns
.Op Cm !\&
.Xc
Отредактирует файл, содержащий следующий контекст для текущего тега.
.Pp
.It Xo
.Cm tagp Ns Op Cm op Ns
.Op Cm !\&
.Op Ar file | number
.Xc
Перейдет к указанному тегу в стеке тегов.
.Pp
.It Xo
.Cm tagpr Ns Op Cm ev Ns
.Op Cm !\&
.Xc
Отредактирует файл, содержащий предыдущий контекст для текущего тега.
.Pp
.It Xo
.Cm tagt Ns Op Cm op Ns
.Op Cm !\&
.Xc
Перейдет к последнему тегу в стеке тегов, очистив его.
.Pp
.It Xo
.Cm una Ns Op Cm bbreviate
.Ar lhs
.Xc
.Nm vi
only.
Удалит аббревиатуру.
.Pp
.It Cm u Ns Op Cm ndo
Отменит последнее изменение, внесенное в файл.
.Pp
.It Xo
.Cm unm Ns Op Cm ap Ns
.Op Cm !\&
.Ar lhs
.Xc
Размонтирует сопоставленную строку.
.Pp
.It Cm ve Ns Op Cm rsion
Отобразите версию приложения.
.Nm ex Ns / Ns Nm vi
editor.
.Pp
.It Xo
.Op Ar line
.Cm vi Ns Op Cm sual
.Op Ar type
.Op Ar count
.Op Ar flags
.Xc
.Nm ex
mode only.
Enter
.Nm vi .
.Pp
.It Xo
.Cm Vi Ns
.Op Cm sual Ns
.Op Cm !\&
.Op Ar +cmd
.Op Ar file
.Xc
.Nm vi
только в режиме просмотра. Отредактируйте другой файл, открыв новый экран под текущим
экраном.
.Pp
.It Xo
.Cm viu Ns Op Cm sage
.Op Ar command
.Xc
Display usage for a
.Nm vi
command.
.Pp
.It Xo
.Cm vs Ns Op Cm plit
.Op Ar +cmd
.Op Ar file
.Xc
Edit a different file by opening a new screen to the right of the current
screen.
.Pp
.It Xo
.Op Ar range
.Cm w Ns Op Cm rite Ns
.Op Cm !\&
.Op >>
.Op Ar file
.Xc
.It Xo
.Op Ar range
.Cm w Ns Op Cm rite
.Cm !\& Ns Ar shell-command
.Xc
.It Xo
.Op Ar range
.Cm wn Ns Op Cm !\&
.Op >>
.Op Ar file
.Xc
.It Xo
.Op Ar range
.Cm wq Ns Op Cm !\&
.Op >>
.Op Ar file
.Xc
Write the entire file, or
.Ar range .
.Sq !\&
overwrites a different, preexisting file.
.Sq >>
appends to a file that may preexist. Whitespace followed by
.Sq !\&
pipes the file to
.Ar shell-command .
.Cm wn
moves to the next file if writing succeeds.
.Cm wq
exits the editor if writing succeeds, unless there are more files to edit;
.Sq !\&
exits regardless.
.Pp
.It Xo
.Op Ar range
.Cm x Ns Op Cm it Ns
.Op Cm !\&
.Op Ar file
.Xc
Exit the editor,
writing the file if it has been modified.
.Pp
.It Xo
.Op Ar range
.Cm ya Ns Op Cm nk
.Op Ar buffer
.Op Ar count
.Xc
Copy the specified lines to a buffer.
.Pp
.It Xo
.Op Ar line
.Cm z
.Op Ar type
.Op Ar count
.Op Ar flags
.Xc
Adjust the window.
.El
.Sh НАБОР ПАРАМЕТРОВ
Существует большое количество опций, которые могут быть установлены
.Pq или снимите флажок, чтобы изменить поведение редактора.
В этом разделе описаны параметры, их сокращения и
значения по умолчанию.
.Pp
В каждой записи, приведенной ниже, первая часть заголовка - это полное название
опции, за которым следуют любые эквивалентные сокращения.
Часть, заключенная в квадратные скобки, - это значение опции по умолчанию.
Большинство параметров являются логическими, то есть они либо включены, либо выключены,
и не имеют соответствующего значения.
.Pp
Options apply to both
.Nm ex
and
.Nm vi
modes, unless otherwise specified.
.Bl -tag -width Ds
.It Cm altwerase Bq off
.Nm vi
only.
Select an alternate word erase algorithm.
.It Cm autoindent , ai Bq off
Automatically indent new lines.
.It Cm autoprint , ap Bq on
.Nm ex
only.
Display the current line automatically.
.It Cm autowrite , aw Bq off
Write modified files automatically when changing files or suspending the editor
session.
.It Cm backup Bq \&"\&"
Back up files before they are overwritten.
.It Cm beautify , bf Bq off
Discard control characters.
.It Cm cdpath Bo environment variable Ev CDPATH , or current directory Bc
The directory paths used as path prefixes for the
.Cm cd
command.
.It Cm cedit Bq no default
Set the character to edit the colon command-line history.
.It Cm columns , co Bq 80
Set the number of columns in the screen.
.It Cm comment Bq off
.Nm vi
only.
Пропускает вводные комментарии в языковых файлах shell, C и C++.
Каталог It Cm , dir с переменной окружения Ev TMPDIR или Pa /tmp Bc
Каталог, в котором создаются временные файлы.
.It Cm edcompatible , ed Bq отключен
Запомните значения этого
.Sq c
and
.Sq g
suffixes to the
.Cm substitute
commands, instead of initializing them as unset for each new command.
.It Cm errorbells , eb Bq off
.Nm ex
only.
Announce error messages with a bell.
.It Cm escapetime Bq 1
The tenths of a second
.Nm ex Ns / Ns Nm vi
waits for a subsequent key to complete an
.Aq escape
key mapping.
.It Cm expandtab , et Bq off
Expand
.Aq tab
characters to
.Aq space
when inserting, replacing or shifting text, autoindenting,
indenting with
.Aq Ic control-T ,
outdenting with
.Aq Ic control-D ,
or
when filtering lines with the
.Cm !\&
command.
.It Cm exrc , ex Bq off
Read the startup files in the local directory.
.It Cm extended Bq off
Use extended regular expressions
.Pq EREs
rather than basic regular expressions
.Pq BREs .
See
.Xr re_format 7
для получения дополнительной информации о регулярных выражениях.
.It Cm filec Bq Aq tab
Установите символ для завершения пути к файлу в командной строке с двоеточием.
.It Cm fileencoding , fe Bq auto detect
Установите кодировку текущего файла.
.It Cm flash Bq on
Мигает экран вместо звукового сигнала клавиатуры при ошибке.
.It Cm hardtabs, ht Bq 0
Установите интервал между настройками вкладки "Оборудование".
В настоящее время эта опция не действует.
.It Cm iclower Bq off
Делает все регулярные выражения нечувствительными к регистру,
до тех пор, пока в строке поиска не появится заглавная буква.
.It Cm ignorecase , ic Bq off
Игнорируйте различия в регистре в регулярных выражениях.
.It Cm inputencoding , ie Bq locale
Установите кодировку вводимых вами символов.
.It Cm keytime Bq 6
Десятые доли секунды
.Nm ex Ns / Ns Nm vi
ожидает, пока последующий ключ завершит сопоставление ключей.
.It Cm leftright Bq off
.Nm vi
только.
Do left-right scrolling.
.It Cm lines , li Bq 24
.Nm vi
only.
Set the number of lines in the screen.
.It Cm lisp Bq off
.Nm vi
only.
Измените различные поисковые команды и параметры для работы с Lisp.
Эта опция еще не реализована.
.It Cm list Bq off
Display lines in an unambiguous fashion.
.It Cm lock Bq on
Попытайтесь получить эксклюзивную блокировку для любого редактируемого, считываемого или записываемого файла.
.It Cm magic Bq on
When turned off, all regular expression characters except for
.Sq \(ha
and
.Sq \(Do
обрабатываются как обычные символы.
Перед отдельными символами по
.Sq \e
re-enables them.
.It Cm matchchars Bq []{}()
Character pairs looked for by the
.Cm %
command.
.It Cm matchtime Bq 7
.Nm vi
only.
The tenths of a second
.Nm ex Ns / Ns Nm vi
pauses on the matching character when the
.Cm showmatch
option is set.
.It Cm mesg Bq on
Permit messages from other users.
.It Cm msgcat Bq /usr/share/vi/catalog/
Selects a message catalog to be used to display error and informational
messages in a specified language.
.It Cm modelines , modeline Bq off
Read the first and last few lines of each file for
.Nm ex
commands.
This option will never be implemented.
.It Cm noprint Bq \&"\&"
Characters that are never handled as printable characters.
.It Cm number , nu Bq off
Precede each line displayed with its current line number.
.It Cm octal Bq off
Display unknown characters as octal numbers, instead of the default
hexadecimal.
.It Cm open Bq on
.Nm ex
only.
If this option is not set, the
.Cm open
and
.Cm visual
commands are disallowed.
.It Cm optimize , opt Bq on
.Nm vi
only.
Optimize text throughput to dumb terminals.
This option is not yet implemented.
.It Cm paragraphs , para Bq "IPLPPPQPP LIpplpipbp"
.Nm vi
only.
Define additional paragraph boundaries for the
.Cm {\&
and
.Cm }\&
commands.
.It Cm path Bq \&"\&"
Define additional directories to search for files being edited.
.It Cm print Bq \&"\&"
Characters that are always handled as printable characters.
.It Cm prompt Bq on
.Nm ex
only.
Display a command prompt.
.It Cm readonly , ro Bq off
Mark the file and session as read-only.
.It Cm recdir Bq /var/tmp/vi.recover
The directory where recovery files are stored.
.It Cm redraw , re Bq off
.Nm vi
only.
Simulate an intelligent terminal on a dumb one.
This option is not yet implemented.
.It Cm remap Bq on
Remap keys until resolved.
.It Cm report Bq 5
Set the number of lines about which the editor reports changes or yanks.
.It Cm ruler Bq off
.Nm vi
only.
Display a row/column ruler on the colon command line.
.It Cm scroll , scr Bq "window size / 2"
Set the number of lines scrolled.
.It Cm searchincr Bq off
Makes the
.Cm /
and
.Cm ?\&
commands incremental.
.It Cm sections , sect Bq "NHSHH HUnhsh"
.Nm vi
only.
Define additional section boundaries for the
.Cm [[
and
.Cm ]]
commands.
.It Cm secure Bq off
Turns off all access to external programs.
.It Cm shell , sh Bo environment variable Ev SHELL , or Pa /bin/sh Bc
Select the shell used by the editor.
.It Cm shellmeta Bq \(ti{[*?$\`\(aq\&"\e
Set the meta characters checked to determine if file name expansion
is necessary.
.It Cm shiftwidth , sw Bq 8
Set the autoindent and shift command indentation width.
.It Cm showmatch , sm Bq off
.Nm vi
only.
Note the left matching characters when the right ones are inserted.
.It Cm showmode , smd Bq off
.Nm vi
only.
Display the current editor mode and a
.Dq modified
flag.
.It Cm sidescroll Bq 16
.Nm vi
only.
Set the amount a left-right scroll will shift.
.It Cm slowopen , slow Bq off
Delay display updating during text input.
This option is not yet implemented.
.It Cm sourceany Bq off
Read startup files not owned by the current user.
This option will never be implemented.
.It Cm tabstop , ts Bq 8
This option sets tab widths for the editor display.
.It Cm taglength , tl Bq 0
Set the number of significant characters in tag names.
.It Cm tags , tag Bq tags
Set the list of tags files.
.It Xo
.Cm term , ttytype , tty
.Bq environment variable Ev TERM
.Xc
Set the terminal type.
.It Cm terse Bq off
This option has historically made editor messages less verbose.
It has no effect in this implementation.
.It Cm tildeop Bq off
Modify the
.Cm \(ti
command to take an associated motion.
.It Cm timeout , to Bq on
Time out on keys which may be mapped.
.It Cm ttywerase Bq off
.Nm vi
only.
Select an alternate erase algorithm.
.It Cm verbose Bq off
.Nm vi
only.
Display an error message for every error.
.It Cm w300 Bq no default
.Nm vi
only.
Set the window size if the baud rate is less than 1200 baud.
.It Cm w1200 Bq no default
.Nm vi
only.
Set the window size if the baud rate is equal to 1200 baud.
.It Cm w9600 Bq no default
.Nm vi
only.
Set the window size if the baud rate is greater than 1200 baud.
.It Cm warn Bq on
.Nm ex
only.
This option causes a warning message to be printed on the terminal
if the file has been modified since it was last written, before a
.Cm !\&
command.
.It Xo
.Cm window , w , wi
.Bq environment variable Ev LINES No \(mi 1
.Xc
Set the window size for the screen.
.It Cm windowname Bq off
Change the icon/window name to the current file name.
.It Cm wraplen , wl Bq 0
.Nm vi
only.
Break lines automatically,
the specified number of columns from the left-hand margin.
If both the
.Cm wraplen
and
.Cm wrapmargin
edit options are set, the
.Cm wrapmargin
value is used.
.It Cm wrapmargin , wm Bq 0
.Nm vi
only.
Break lines automatically,
the specified number of columns from the right-hand margin.
If both the
.Cm wraplen
and
.Cm wrapmargin
edit options are set, the
.Cm wrapmargin
value is used.
.It Cm wrapscan , ws Bq on
Set searches to wrap around the end or beginning of the file.
.It Cm writeany , wa Bq off
Turn off file-overwriting checks.
.El
.Sh ОКРУЖАЮЩАЯ СРЕДА
.Bl -tag -width "COLUMNS"
.It Ev COLUMNS
The number of columns on the screen.
This value overrides any system or terminal specific values.
If the
.Ev КОЛОНКИ
environment variable is not set when
.Nm ex Ns / Ns Nm vi
runs, or the
.Cm columns
option is explicitly reset by the user,
.Nm ex Ns / Ns Nm vi
enters the value into the environment.
.It Ev EXINIT
A list of
.Nm ex
startup commands, read after
.Pa /etc/vi.exrc
unless the variable
.Ev NEXINIT
is also set.
.It Ev HOME
The user's home directory, used as the initial directory path for the startup
.Pa $HOME/.nexrc
and
.Pa $HOME/.exrc
files.
This value is also used as the default directory for the
.Cm cd
command.
.It Ev LINES
The number of rows on the screen.
This value overrides any system or terminal specific values.
If the
.Ev LINES
environment variable is not set when
.Nm ex Ns / Ns Nm vi
runs, or the
.Cm lines
option is explicitly reset by the user,
.Nm ex Ns / Ns Nm vi
enters the value into the environment.
.It Ev NEXINIT
A list of
.Nm ex
startup commands, read after
.Pa /etc/vi.exrc .
.It Ev SHELL
The user's shell of choice
.Pq see also the Cm shell No option .
.It Ev TERM
The user's terminal type.
The default is the type
.Dq unknown .
If the
.Ev TERM
environment variable is not set when
.Nm ex Ns / Ns Nm vi
runs, or the
.Cm term
option is explicitly reset by the user,
.Nm ex Ns / Ns Nm vi
enters the value into the environment.
.It Ev TMPDIR
The location used to store temporary files
.Pq see also the Cm directory No edit option .
.El
.Sh ASYNCHRONOUS EVENTS
.Bl -tag -width "SIGWINCH" -compact
.It Dv SIGALRM
.Nm vi Ns / Ns Nm ex
uses this signal for periodic backups of file modifications and to display
.Dq busy
messages when operations are likely to take a long time.
.Pp
.It Dv SIGHUP
.It Dv SIGTERM
Если текущий буфер изменился с момента его последней полной записи,
редактор попытается сохранить измененный файл, чтобы позже его можно было восстановить.
См.
.Nm vi Ns / Ns Nm ex
reference manual section
.Sx Recovery
for more information.
.Pp
.It Dv SIGINT
При возникновении прерывания текущая операция приостанавливается, и редактор возвращается к командному уровню. Если во время ввода текста происходит прерывание, уже введенный текст преобразуется в файл, как если бы ввод текста был завершен обычным образом.
.Pp
.It Dv SIGWINCH
The screen is resized.
See the
.Nm vi Ns / Ns Nm ex
reference manual section
.Sx Sizing the Screen
for more information.
.\" .Pp
.\" .It Dv SIGCONT
.\" .It Dv SIGTSTP
.\" .Nm vi Ns / Ns Nm ex
.\" ignores these signals.
.El
.Sh FILES
.Bl -tag -width "/var/tmp/vi.recover"
.It Pa /bin/sh
The default user shell.
.It Pa /etc/vi.exrc
System-wide
.Nm vi
startup file.
It is read for
.Nm ex
команды, которые будут первыми в последовательности запуска.
Они должны принадлежать root или пользователю
и быть доступны только для записи владельцем.
.It Pa /tmp
Каталог временных файлов.
.It Pa /var/tmp/vi.recover
Каталог файлов восстановления по умолчанию.
.It Pa $HOME/.nexrc
Первый выбор для файла запуска домашнего каталога пользователя, прочитанного для
.Nm ex
команды сразу после
.Pa /etc/vi.exrc
если только ни один из них
.Ev NEXINIT
или
.Ev EXINIT.
Должен принадлежать root или пользователю
и быть доступен только для записи владельцем последних цифр телефона.
.It Pa $HOME/.exrc
Второй вариант для файла запуска домашнего каталога пользователя, прочитанный для
.Nm ex
команды при тех же условиях, что и
.Pa $HOME/.nexrc .
.It Pa .nexrc
Первый выбор для файла запуска локального каталога, прочитанный для
.Nm ex
команды в конце последовательности запуска, если
.Cm exrc
параметр был включена ранее.
Должна принадлежать пользователю
и быть доступна только для записи владельцем.
.It Pa .exrc
Второй вариант для файла запуска локального каталога, прочитанный для
.Nm 
команды при тех же условиях, что и
.Pa .nexrc .
.El
.Sh СТАТУС ВЫХОДА
The
.Nm ex
and
.Nm vi
utilities exit 0 on success,
and \*(Gt0если возникнет ошибка.
.Sh СМОТРЕТЬ ТАКЖЕ
.Xr ctags 1 ,
.Xr iconv 1 ,
.Xr re_format 7
.Rs
.%T vi/ex справочное руководство
.%U https://docs.freebsd.org/44doc/usd/13.viref/paper.pdf
.Re
.Sh СТАНДАРТЫ
.Nm nex Ns / Ns Nm nvi
находится близко к
.St -p1003.1-2008 .
Этот документ отличается от исторического
.Nm ex Ns / Ns Nm vi
практикуется в нескольких местах; с обеих сторон необходимо внести изменения.
.Sh ИСТОРИЯ

.Nm ex
редактор впервые появился в
.Bx 1 .

.Nm nex Ns / Ns Nm nvi
replacements for the
.Nm ex Ns / Ns Nm vi
редактор впервые появился в
.Bx 4.4 .
.Sh АВТОРЫ
.An Билл Джой
написал оригинальную версию
.Nm ex
В 1977.
